#ifndef FIND_UNSAFE_RS_H
#define FIND_UNSAFE_RS_H

#pragma once

/* Warning, this file is autogenerated by cbindgen. Don't modify this manually. */



typedef struct FindUnsafeRs FindUnsafeRs;

#ifdef __cplusplus
extern "C" {
#endif // __cplusplus

/**
 * Wrapper for `FindUnsafeRs.analysze_file``
 *
 * Returns 0 on success
 *
 * Returns errno or negative value on error
 */
int find_unsafe_rs_analyze_file(const struct FindUnsafeRs *f, const char *path);

/**
 * Free an instance of `FindUnsafeRs` that was previously allocated using
 * `find_unsafe_rs_new``
 */
void find_unsafe_rs_free(struct FindUnsafeRs *f);

/**
 * Wrapper for FindUnsafeRs.is_any_unsafe_location
 *
 * Returns 0 on success
 *
 * Returns errno or negative value on error
 *
 * Writes 0 into out_ret if no unsafe location matches
 *
 * Writes 1 into out_ret if any unsafe location matches
 */
int find_unsafe_rs_is_any_unsafe_location(const struct FindUnsafeRs *f,
                                          const char *path,
                                          unsigned int line,
                                          unsigned int column,
                                          int *out_ret);

/**
 * Allocate a new instance of `FindUnsafeRs``
 *
 * Must be freed by calling `find_unsafe_rs_free` on it
 */
struct FindUnsafeRs *find_unsafe_rs_new(void);

#ifdef __cplusplus
} // extern "C"
#endif // __cplusplus

#endif /* FIND_UNSAFE_RS_H */
