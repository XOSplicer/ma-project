/*
    Simplified Version of
    CVE-ID:     CVE-2019-16140
    FROM:       https://github.com/sagebind/isahc/blob/0.1.2/src/buffer.rs
    LICENSE:    MIT License Copyright (c) 2017 Stephen M. Coakley
*/

#![feature(start)]

macro_rules! copy {
    ($src:expr, $src_start:expr, $dest:expr, $dest_start:expr, $len:expr) => {
        (&mut $dest[$dest_start..$dest_start+$len]).copy_from_slice(&$src[$src_start..$src_start+$len])
    };
}

#[derive(Clone, Debug)]
pub struct Buffer {
    array: Box<[u8]>,
    head: usize,
    len: usize,
}

impl Buffer {
    pub const DEFAULT_CAPACITY: usize = 4096;

    pub fn new() -> Self {
        Self::with_capacity(Self::DEFAULT_CAPACITY)
    }

    pub fn with_capacity(capacity: usize) -> Self {
        Self {
            array: Buffer::allocate(capacity.next_power_of_two()),
            head: 0,
            len: 0,
        }
    }

    pub fn capacity(&self) -> usize {
        self.array.len()
    }

    fn offset(&self, index: usize) -> usize {
        let mut offset = self.head + index;

        if offset >= self.capacity() {
            offset -= self.capacity();
        }

        offset
    }

    pub fn copy_to(&self, dest: &mut [u8]) -> usize {
        // Determine the number of bytes to copy.
        let count = dest.len().min(self.len);

        // Nothing to do.
        if count == 0 {
            return 0;
        }

        // Current buffer is wrapped; copy head segment and tail segment separately.
        let tail = self.offset(count);
        if tail <= self.head {
            let head_len = self.capacity() - self.head;
            copy!(self.array, self.head, dest, 0, head_len);
            copy!(self.array, 0, dest, head_len, tail);
        }

        // Buffer is contiguous; copy in one step.
        else {
            copy!(self.array, self.head, dest, 0, count);
        }

        count
    }

    fn allocate(size: usize) -> Box<[u8]> {
        unsafe {
            let mut vec = Vec::<u8>::with_capacity(size);
            let slice = std::slice::from_raw_parts_mut(vec.as_mut_ptr(), vec.capacity());
            std::mem::forget(vec);
            Box::from_raw(slice)
        }
    }

}

impl From<Buffer> for Vec<u8> {
    fn from(buffer: Buffer) -> Vec<u8> {
        let mut slice = Buffer::allocate(buffer.len);
        let len = buffer.copy_to(&mut slice);

        unsafe {
            Vec::from_raw_parts(slice.as_mut_ptr(), len, slice.len())
        }
        // USE-AFTER-FREE: slice is dropped here, but Vec still holds a reference
    }
}

#[start]
fn main(_argc: isize, _argv: *const *const u8) -> isize {
    let buffer = Buffer::new();
    let vec: Vec<u8> = Vec::from(buffer);
    drop(vec);
    0
}