extern crate typenum;
extern crate linea;
extern crate generic_array;

use generic_array::*;
use linea::Matrix;
use linea::*;
use std::ops::Mul;
use typenum::consts::*;

#[derive(Debug)]
struct Item(Vec<i32>);

#[derive(Copy, Clone)]
struct Scale();

impl Mul<Scale> for Item {
    type Output = Scale;

    fn mul(self, _: Scale) -> Self::Output {
        panic!()
    }
}

impl Drop for Item {
    fn drop(&mut self) {
        println!("dropped {:?}", self.0)
    }
}

fn main() {
    let mat: Matrix<Item, _, _> = mat![Item: Item(vec![1, 2, 3])];
    mat.scale(Scale()); // double drop happens here
}
